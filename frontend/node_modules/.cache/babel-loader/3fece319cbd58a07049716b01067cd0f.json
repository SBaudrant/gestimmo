{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter } from 'connected-react-router';\nimport homeSaga from './home/sagas';\nimport { homeReducer } from './home/reducer';\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = history => combineReducers({\n  home: homeReducer,\n  router: connectRouter(history)\n}); // Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n\nexport function* rootSaga() {\n  yield all([fork(homeSaga)]);\n}","map":{"version":3,"sources":["/app/src/store/index.ts"],"names":["combineReducers","all","fork","connectRouter","homeSaga","homeReducer","createRootReducer","history","home","router","rootSaga"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA2C,wBAA3C;AAGA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AASA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAC/BP,eAAe,CAAC;AACdQ,EAAAA,IAAI,EAAEH,WADQ;AAEdI,EAAAA,MAAM,EAAEN,aAAa,CAACI,OAAD;AAFP,CAAD,CADV,C,CAMP;AACA;AACA;;AACA,OAAO,UAAUG,QAAV,GAAqB;AAC1B,QAAMT,GAAG,CAAC,CAACC,IAAI,CAACE,QAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { combineReducers } from 'redux'\nimport { all, fork } from 'redux-saga/effects'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport { History } from 'history'\n\nimport homeSaga from './home/sagas'\nimport { homeReducer } from './home/reducer'\nimport { HomeState } from './home/types'\n\n// The top-level state object\nexport interface ApplicationState {\n  home: HomeState\n  router: RouterState\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    home: homeReducer,\n    router: connectRouter(history)\n  })\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n  yield all([fork(homeSaga)])\n}\n"]},"metadata":{},"sourceType":"module"}