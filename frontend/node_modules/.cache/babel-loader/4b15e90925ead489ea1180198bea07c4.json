{"ast":null,"code":"// This file holds our state type, as well as any other types related to this Redux store.\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let HomeActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (HomeActionTypes) {\n  HomeActionTypes[\"FETCH_REQUEST\"] = \"@@home/FETCH_REQUEST\";\n  HomeActionTypes[\"FETCH_SUCCESS\"] = \"@@home/FETCH_SUCCESS\";\n  HomeActionTypes[\"FETCH_ERROR\"] = \"@@home/FETCH_ERROR\";\n})(HomeActionTypes || (HomeActionTypes = {}));","map":{"version":3,"sources":["/app/src/store/home/types.ts"],"names":["HomeActionTypes"],"mappings":"AAAA;AASA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,eAAZ,C,CAMA;AACA;;WAPYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e","sourcesContent":["// This file holds our state type, as well as any other types related to this Redux store.\n\nexport interface HomeMetrics extends ApiResponse {\n  id: number;\n  packsToSpecify: number;\n  componentsWithoutModel: number;\n  ecnInProgress: number;\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum HomeActionTypes {\n  FETCH_REQUEST = '@@home/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@home/FETCH_SUCCESS',\n  FETCH_ERROR = '@@home/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface HomeState {\n  readonly loading: boolean\n  readonly data: HomeMetrics[]\n  readonly errors?: string\n}\n"]},"metadata":{},"sourceType":"module"}