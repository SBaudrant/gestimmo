{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { HomeActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', '/home');\n\n    if (res.error) {\n      yield put(fetchError(res.error));\n    } else {\n      yield put(fetchSuccess(res));\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack));\n    } else {\n      yield put(fetchError('An unknown error occured.'));\n    }\n  }\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction* watchFetchRequest() {\n  yield takeEvery(HomeActionTypes.FETCH_REQUEST, handleFetch);\n} // We can also use `fork()` here to split our saga into multiple watchers.\n\n\nfunction* homeSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n\nexport default homeSaga;","map":{"version":3,"sources":["/app/src/store/home/sagas.ts"],"names":["all","call","fork","put","takeEvery","HomeActionTypes","fetchError","fetchSuccess","callApi","handleFetch","res","error","err","Error","stack","watchFetchRequest","FETCH_REQUEST","homeSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,WAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,UAAUC,WAAV,GAAwB;AACtB,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMT,IAAI,CAACO,OAAD,EAAU,KAAV,EAAiB,OAAjB,CAAtB;;AAEA,QAAIE,GAAG,CAACC,KAAR,EAAe;AACb,YAAMR,GAAG,CAACG,UAAU,CAACI,GAAG,CAACC,KAAL,CAAX,CAAT;AACD,KAFD,MAEO;AACL,YAAMR,GAAG,CAACI,YAAY,CAACG,GAAD,CAAb,CAAT;AACD;AACF,GATD,CASE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAG,YAAYC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EAAuC;AACrC,YAAMX,GAAG,CAACG,UAAU,CAACM,GAAG,CAACE,KAAL,CAAX,CAAT;AACD,KAFD,MAEO;AACL,YAAMX,GAAG,CAACG,UAAU,CAAC,2BAAD,CAAX,CAAT;AACD;AACF;AACF,C,CAED;AACA;;;AACA,UAAUS,iBAAV,GAA8B;AAC5B,QAAMX,SAAS,CAACC,eAAe,CAACW,aAAjB,EAAgCP,WAAhC,CAAf;AACD,C,CAED;;;AACA,UAAUQ,QAAV,GAAqB;AACnB,QAAMjB,GAAG,CAAC,CAACE,IAAI,CAACa,iBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeE,QAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\nimport { HomeActionTypes } from './types'\nimport { fetchError, fetchSuccess } from './actions'\nimport { callApi } from '../../utils/api';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', '/home')\n\n    if (res.error) {\n      yield put(fetchError(res.error))\n    } else {\n      yield put(fetchSuccess(res))\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack))\n    } else {\n      yield put(fetchError('An unknown error occured.'))\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(HomeActionTypes.FETCH_REQUEST, handleFetch)\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction* homeSaga() {\n  yield all([fork(watchFetchRequest)])\n}\n\nexport default homeSaga\n"]},"metadata":{},"sourceType":"module"}